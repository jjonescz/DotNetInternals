@page "/"
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject CompilerProxy Compiler
@inject LanguageServerController LanguageServerController

<PageTitle>Lab • DotNetInternals</PageTitle>

<div class="row align-items-center justify-content-center my-1 w-100">
    @* Input presets (quick-start templates) *@
    <div class="col-auto ms-2 me-auto">
        <select class="form-select" title="Presets" @bind:get="SelectedPreset" @bind:set="OnInputPresetChangedAsync">
            <option value="@InputPreset.CSharp">
                C#
            </option>
            <option value="@InputPreset.Razor">
                Razor
            </option>
            <option value="@InputPreset.Cshtml">
                CSHTML
            </option>
            @if (SelectedPreset == InputPreset.Custom)
            {
                <option value="@InputPreset.Custom">
                    Custom
                </option>
            }
        </select>
    </div>

    @* App name / link *@
    <div class="col-auto">
        <a href="/" class="text-decoration-none">lab.razor.fyi</a>
    </div>

    @* Input tabs (file names) *@
    <div class="col-auto">
        <div class="input-group">
            @if (CurrentInput != null && renamingTo != null)
            {
                @* Renaming confirmation *@
                <input type="text" class="form-control" placeholder="@CurrentInput.FileName" title="File name" @bind="renamingTo" />
                <button type="button" class="btn btn-outline-primary" title="Confirm rename"
                        @onclick="RenameInputAsync">
                    @BootstrapIcons.CheckLg
                </button>
                <button type="button" class="btn btn-outline-secondary" title="Cancel rename"
                        @onclick="() => renamingTo = null">
                    @BootstrapIcons.XLg
                </button>
            }
            else
            {
                @* Input tabs *@
                <select class="form-select" title="Files" @bind:get="currentInputIndex" @bind:set="OnInputSelectedAsync">
                    @foreach (var (index, input) in inputs.Index())
                    {
                        <option value="@index">
                            @input.FileName
                        </option>
                    }
                    <hr />
                    <option value="@((int)SpecialInput.AddCSharp)">
                        Add .cs
                    </option>
                    <option value="@((int)SpecialInput.AddRazor)">
                        Add .razor
                    </option>
                    <option value="@((int)SpecialInput.AddCshtml)">
                        Add .cshtml
                    </option>
                    @if (inputs.Count > 1)
                    {
                        <hr />
                        <option value="@((int)SpecialInput.RemoveOtherFiles)">
                            Remove other files
                        </option>
                    }
                </select>

                @if (CurrentInput != null)
                {
                    @* Rename button *@
                    <button type="button" class="btn btn-outline-secondary" title="Rename current file"
                            @onclick="() => renamingTo = CurrentInput.FileName">
                        @BootstrapIcons.InputCursorText
                    </button>

                    @* Delete button *@
                    if (inputs.Count > 1)
                    {
                        <button type="button" class="btn btn-outline-danger" title="Delete current file"
                                @onclick="DeleteInputAsync">
                            @BootstrapIcons.Trash3
                        </button>
                    }
                }
            }
        </div>
    </div>

    @* Compile button *@
    <div class="col-auto">
        <button type="button" class="btn btn-primary" @onclick="CompileAsync">
            Compile
            @if (compilationInProgress)
            {
                <div class="spinner-border spinner-border-sm ms-2" role="status">
                    <span class="visually-hidden">Compiling...</span>
                </div>
            }
        </button>
    </div>

    @* Output tabs *@
    @if (compiled != null)
    {
        <div class="col-auto">
            <div class="input-group">
                @* Output tabs *@
                <select class="form-select" title="Output type" @bind="selectedOutputType">
                    @foreach (var output in CurrentCompiledFile?.Outputs ?? [])
                    {
                        <option value="@output.Type">
                            @output.Type
                        </option>
                    }

                    @if (compiled.GlobalOutputs.Length > 0)
                    {
                        <hr />
                        @foreach (var output in compiled.GlobalOutputs)
                        {
                            <option value="@output.Type">
                                @output.Type
                            </option>
                        }
                    }
                </select>

                @* Error List button *@
                @if (compiled is { NumErrors: > 0 } or { NumWarnings: > 0 })
                {
                    var cls = compiled.NumErrors > 0 ? "btn-danger" : "btn-warning";
                    <button type="button" class="btn @cls"
                            title="Display Error List"
                            @onclick="() => selectedOutputType = CompiledAssembly.DiagnosticsOutputType">
                        @(compiled.NumErrors > 0 ? compiled.NumErrors : compiled.NumWarnings)
                    </button>
                }

                @* Output loading indicator *@
                @if (outputLoading)
                {
                    <span class="input-group-text">
                        <span class="spinner-border spinner-border-sm" role="status" title="Output is loading">
                            <span class="visually-hidden">Output loading...</span>
                        </span>
                    </span>
                }
            </div>
        </div>
    }

    @* Settings button *@
    <div class="col-auto me-auto">
        <CascadingValue IsFixed="true" Value="this">
            <Settings @ref="settings" Editor="inputEditor" @bind-WordWrap="wordWrap" @bind-UseVim="useVim" />
        </CascadingValue>
    </div>

    @* Layout buttons *@
    <div class="col-auto">
        <div class="btn-group">
            @if (layout != Layout.InputOnly)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="() => layout = Layout.InputOnly"
                        title="Display input (left side) only">
                    @BootstrapIcons.LayoutSidebarReverse
                </button>
            }
            @if (layout != Layout.Split)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="() => layout = Layout.Split"
                        title="Display both input and output side-by-side">
                    @BootstrapIcons.LayoutSplit
                </button>
            }
            @if (layout != Layout.OutputOnly)
            {
                <button type="button" class="btn btn-outline-secondary" @onclick="() => layout = Layout.OutputOnly"
                        title="Display output (right side) only">
                    @BootstrapIcons.LayoutSidebar
                </button>
            }
        </div>
    </div>
</div>

@* Input / output text areas *@
@{
    var textAreaClass = $"form-control h-100 flex-grow-1 {(wordWrap ? "" : "no-wrap")}";
    var inputStyle = layout == Layout.OutputOnly ? "display: none !important" : "";
    var outputStyle = layout == Layout.InputOnly ? "display: none !important" : "";
}
<div class="row g-0 flex-grow-1">
    <div class="col d-flex flex-column" style="@inputStyle">
        <div id="vim-status" class="vim-status-bar" hidden="@(!useVim)" />
        <div class="flex-grow-1">
            <BlazorMonaco.Editor.StandaloneCodeEditor @ref="inputEditor" Id="input-editor"
                ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorInitAsync" />
        </div>
    </div>
    <div class="col" style="@outputStyle">
        <textarea value="@Output" class="@textAreaClass" readonly placeholder="Empty output (click Compile to refresh)" spellcheck="false"></textarea>
    </div>
</div>

@code {
    private readonly List<Input> inputs = new();
    private int currentInputIndex;
    private string? renamingTo;
    private StandaloneCodeEditor inputEditor = null!;
    private string? selectedOutputType;
    private bool compilationInProgress;
    private bool outputLoading;
    private CompiledAssembly? compiled;
    private Settings settings = null!;
    private bool wordWrap;
    private bool useVim;
    private Layout layout;

    private sealed record Input(string FileName, TextModel Model)
    {
        public string FileName { get; set; } = FileName;
    }

    private enum InputPreset
    {
        Custom,
        CSharp,
        Razor,
        Cshtml,
    }

    private enum SpecialInput
    {
        AddRazor = -1,
        AddCSharp = -2,
        AddCshtml = -3,
        RemoveOtherFiles = -4,
    }

    private enum Layout
    {
        Split,
        InputOnly,
        OutputOnly,
    }

    private Input? CurrentInput
    {
        get
        {
            if (currentInputIndex < 0 || currentInputIndex >= inputs.Count)
            {
                return null;
            }

            return inputs[currentInputIndex];
        }
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LanguageServerController.StartInWorkerAsync();
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadStateFromUrlAsync();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Select an output type if none is selected.
        if ((CurrentCompiledFile?.Outputs.Length > 0 || compiled?.GlobalOutputs.Length > 0) &&
            (selectedOutputType == null || GetOutput(selectedOutputType) == null))
        {
            selectedOutputType = (CurrentCompiledFile?.Outputs)
                .TryConcat(compiled?.GlobalOutputs)
                .MaxBy(static o => o.Priority)!.Type;
            StateHasChanged();
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            WordWrap = wordWrap ? "on" : "off",
        };
    }

    private InputPreset SelectedPreset
    {
        get
        {
            return inputs is [{ } input]
                ? input.FileName switch
                {
                    var s when matches(s, InitialCode.CSharp) => InputPreset.CSharp,
                    var s when matches(s, InitialCode.Razor) => InputPreset.Razor,
                    var s when matches(s, InitialCode.Cshtml) => InputPreset.Cshtml,
                    _ => InputPreset.Custom,
                }
                : InputPreset.Custom;

            static bool matches(string fileName, InitialCode initialCode)
            {
                return fileName.EndsWith(initialCode.SuggestedFileExtension, StringComparison.OrdinalIgnoreCase);
            }
        }
    }

    private async Task OnInputPresetChangedAsync(InputPreset preset)
    {
        var initialCode = preset switch
        {
            InputPreset.CSharp => InitialCode.CSharp,
            InputPreset.Razor => InitialCode.Razor,
            InputPreset.Cshtml => InitialCode.Cshtml,
            _ => null,
        };
        if (initialCode != null)
        {
            await SaveStateToUrlAsync();

            inputs.Clear();
            currentInputIndex = 0;
            await AddInputAsync(initialCode);

            await SaveStateToUrlAsync();
        }
    }

    private async Task OnInputSelectedAsync(int selectedInputIndex)
    {
        await SaveStateToUrlAsync();

        switch (selectedInputIndex)
        {
            case (int)SpecialInput.AddCSharp:
                await AddInputAsync(InitialCode.CSharp);
                break;

            case (int)SpecialInput.AddRazor:
                await AddInputAsync(InitialCode.Razor);
                break;

            case (int)SpecialInput.AddCshtml:
                await AddInputAsync(InitialCode.Cshtml);
                break;

            case (int)SpecialInput.RemoveOtherFiles:
                inputs.RemoveAll(i => i != CurrentInput);
                currentInputIndex = 0;
                break;

            case var _ when selectedInputIndex >= 0 && selectedInputIndex < inputs.Count:
                currentInputIndex = selectedInputIndex;
                await inputEditor.SetModel(inputs[selectedInputIndex].Model);
                break;
        }

        await SaveStateToUrlAsync();
    }

    private async Task RenameInputAsync()
    {
        Debug.Assert(CurrentInput != null && renamingTo != null);

        await SaveStateToUrlAsync();

        if (CurrentInput.FileName != renamingTo)
        {
            var oldLanguage = GetLanguageForFileExtension(Path.GetExtension(CurrentInput.FileName));
            var newLanguage = GetLanguageForFileExtension(Path.GetExtension(renamingTo));

            CurrentInput.FileName = renamingTo;

            if (oldLanguage != newLanguage)
            {
                await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, CurrentInput.Model, newLanguage);
            }
        }
        renamingTo = null;

        await SaveStateToUrlAsync();
    }

    private async Task DeleteInputAsync()
    {
        Debug.Assert(CurrentInput != null && inputs.Count > 1);

        await SaveStateToUrlAsync();

        inputs.RemoveAt(currentInputIndex);
        currentInputIndex = 0;
        await inputEditor.SetModel(CurrentInput.Model);

        await SaveStateToUrlAsync();
    }

    private async Task AddInputAsync(InitialCode initialCode)
    {
        var fileName = FindUniqueName(initialCode);
        var inputCode = initialCode.ToInputCode(fileName);
        var model = await CreateModelAsync(inputCode);
        inputs.Add(new(fileName, model));
        currentInputIndex = inputs.Count - 1;
        await inputEditor.SetModel(model);
    }

    private string FindUniqueName(InitialCode initialCode)
    {
        for (var i = 0; ; i++)
        {
            var suffix = i == 0 ? "" : $"{i}";
            var fileName = initialCode.GetFinalFileName(suffix);
            if (!inputs.Any(i => i.FileName == fileName))
            {
                return fileName;
            }
        }
    }

    private async Task CompileAsync()
    {
        // Complete renaming if in progress.
        if (renamingTo != null)
        {
            await RenameInputAsync();
        }

        compilationInProgress = true;

        var savedState = await SaveStateToUrlAsync();

        await RefreshAsync();

        // Compile.
        compiled = await Compiler.CompileAsync(savedState.Inputs);

        await DisplaySquiggles();

        compilationInProgress = false;
    }

    private async Task DisplaySquiggles()
    {
        foreach (var input in inputs)
        {
            List<MarkerData> markers = compiled?.Diagnostics
                .Where(d => d.FilePath == compiled.BaseDirectory + input.FileName)
                .Select(d => new MarkerData
                {
                    CodeAsObject = new()
                    {
                        Value = d.Id,
                        TargetUri = d.HelpLinkUri,
                    },
                    Message = d.Message,
                    StartLineNumber = d.StartLineNumber,
                    StartColumn = d.StartColumn,
                    EndLineNumber = d.EndLineNumber,
                    EndColumn = d.EndColumn,
                    Severity = d.Severity switch
                    {
                        DiagnosticDataSeverity.Error => MarkerSeverity.Error,
                        DiagnosticDataSeverity.Warning => MarkerSeverity.Warning,
                        _ => MarkerSeverity.Info,
                    },
                })
                .ToList() ?? [];
            await BlazorMonaco.Editor.Global.SetModelMarkers(JSRuntime, input.Model, "Lab", markers);
        }
    }

    private string Output => selectedOutputType switch
    {
        _ when compiled is null => "",
        null => "",
        var other => LoadOutput(other),
    };

    private CompiledFileOutput? GetOutput(string type)
    {
        return CurrentCompiledFile?.GetOutput(type)
            ?? compiled?.GetGlobalOutput(type);
    }

    private string LoadOutput(string type)
    {
        var output = GetOutput(type);

        if (output is null)
        {
            return "";
        }

        if (output.TryGetEagerText(out var text))
        {
            return text;
        }

        if (!outputLoading)
        {
            loadAsync();
        }
        return "";

        async void loadAsync()
        {
            outputLoading = true;
            await RefreshAsync();

            // The text will be cached and loaded synchronously next.
            await output.GetTextAsync();

            outputLoading = false;
            StateHasChanged();
        }
    }

    private CompiledFile? CurrentCompiledFile
    {
        get
        {
            return compiled?.Files.TryGetValue(CurrentInput?.FileName ?? "", out var file) == true
                ? file
                : null;
        }
    }

    private async Task EditorInitAsync()
    {
        await settings.InitializeAsync();

        await LoadStateFromUrlAsync();
    }

    private async Task<TextModel> CreateModelAsync(InputCode inputCode)
    {
        return await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: inputCode.Text,
            language: GetLanguageForFileExtension(inputCode.FileExtension));
    }

    private static string? GetLanguageForFileExtension(string extension) => extension switch
    {
        ".razor" or ".cshtml" => "razor",
        ".cs" => "csharp",
        _ => null,
    };
}
