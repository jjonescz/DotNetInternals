@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject WorkerController Worker
@inject LanguageServices LanguageServices
@inject ILogger<Page> Logger

<PageTitle>.NET Lab</PageTitle>

<FluentHeader Style="background-color: var(--custom-light)" Height="null">
    <FluentStack VerticalAlignment="VerticalAlignment.Center" Wrap="true">
        @* Logo *@
        <a href="/" style="line-height: 0"><img src="favicon.png" alt="Logo" title=".NET Lab" width="24" height="24" /></a>

        @* Input presets (quick-start templates) *@
        <FluentMenuButton Text="Template" Items="presets" OnMenuChanged="OnInputPresetSelectedAsync"
        ButtonStyle="margin-left: 0.5em" />

        <FluentSpacer />

        @* Compile button *@
        <FluentButton Appearance="Appearance.Accent" OnClick="CompileAsync" Loading="compilationInProgress"
        Title="Compile (Ctrl+S)" IconStart="@(new Icons.Regular.Size20.FlashPlay())">
            Compile
        </FluentButton>

        @* Settings button *@
        <FluentButton OnClick="settings.OpenModalAsync"
        IconStart="@(new Icons.Regular.Size20.Settings())">
            Settings

            @if (settings.ShowUpdateAvailableBadge)
            {
                <FluentSpacer Width="4" />
                <FluentBadge Appearance="Appearance.Accent" title="Update is available">1</FluentBadge>
            }
        </FluentButton>

        <FluentSpacer />

        @* Orientation button *@
        @if (orientation == Orientation.Horizontal)
        {
            <FluentButton OnClick="() => orientation = Orientation.Vertical"
            Title="Display editors in a column">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutRowTwo())" Color="Color.Neutral" />
            </FluentButton>
        }
        else
        {
            <FluentButton OnClick="() => orientation = Orientation.Horizontal"
            Title="Display editors in a row">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnTwo())" Color="Color.Neutral" />
            </FluentButton>
        }

        @* Layout buttons *@
        @if (layout != Layout.InputOnly)
        {
            <FluentButton OnClick="() => layout = Layout.InputOnly"
            Title="Display input (left side) only">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnOneThirdRight())" Color="Color.Neutral" />
            </FluentButton>
        }
        @if (layout != Layout.Split)
        {
            <FluentButton OnClick="() => layout = Layout.Split"
            Title="Display both input and output side-by-side">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnTwo())" Color="Color.Neutral" />
            </FluentButton>
        }
        @if (layout != Layout.OutputOnly)
        {
            <FluentButton OnClick="() => layout = Layout.OutputOnly"
            Title="Display output (right side) only">
                <FluentIcon Value="@(new Icons.Regular.Size20.LayoutColumnOneThirdLeft())" Color="Color.Neutral" />
            </FluentButton>
        }
    </FluentStack>
</FluentHeader>

<CascadingValue IsFixed="true" Value="this">
    <Settings @ref="settings" Editor="inputEditor" @bind-WordWrap="wordWrap" @bind-UseVim="useVim" />
</CascadingValue>

@* Input / output panels *@
@{
    RenderFragment inputPanel =@<div style="display: flex; flex-direction: column; height: 100%">
        @* Input tabs *@
        <FluentTabs @bind-ActiveTabId="activeInputTabId" @bind-ActiveTabId:after="OnActiveInputTabIdChangedAsync"
        ShowClose="inputs.Count > 1 || configuration != null" OnTabClose="OnInputTabClosedAsync">
            @* Normal files *@
            @foreach (var (index, input) in inputs.Index())
            {
                <FluentTab Id="@IndexToInputTabId(index)" Label="@(input.FileName)"
                LabelEditable LabelChanged="(newName) => OnInputTabRenamedAsync(input, newName)" />
            }

            @* Special configuration file *@
            @if (configuration != null)
            {
                @* NOTE: Label is shown in the overflow menu, so it needs to be set even though Header is also set. *@
                <FluentTab Id="@IndexToInputTabId((int)SpecialInput.Configuration)" Label="Configuration">
                    <Header>
                        <FluentIcon Value="@(new Icons.Regular.Size16.DocumentSettings())" />
                        <span style="margin-left: 0.2em">Configuration</span>
                    </Header>
                </FluentTab>
            }

            @* Add new file button *@
            <div slot="end">
                <FluentMenuButton IconStart="@(new Icons.Filled.Size20.DocumentAdd())" Text="Add"
                ButtonAppearance="Appearance.Neutral" ButtonStyle="margin-right: 0.2em"
                OnMenuChanged="OnAddInputTabAsync">
                    <FluentMenuItem Id="cs">.cs</FluentMenuItem>
                    <FluentMenuItem Id="razor">.razor</FluentMenuItem>
                    <FluentMenuItem Id="cshtml">.cshtml</FluentMenuItem>
                    <FluentDivider />
                    <FluentMenuItem Id="config">
                        <FluentIcon Slot="start" Value="@(new Icons.Regular.Size16.DocumentSettings())" />
                        Configuration
                    </FluentMenuItem>
                </FluentMenuButton>
            </div>
        </FluentTabs>

        @* VIM status bar *@
        <div id="vim-status" class="vim-status-bar" hidden="@(!useVim)" />

        @* Input editor *@
        <div style="flex-grow: 1">
            <BlazorMonaco.Editor.StandaloneCodeEditor @ref="inputEditor" Id="input-editor"
            ConstructionOptions="EditorConstructionOptions" OnDidInit="EditorInitAsync"
            OnDidChangeModel="LanguageServices.OnDidChangeModel"
            OnDidChangeModelContent="LanguageServices.OnDidChangeModelContent" />
        </div>
    </div>
    ;

    RenderFragment outputPanel =@<div style="display: flex; flex-direction: column; height: 100%">
        @* Output tabs *@
        @* NOTE: @key is needed - otherwise, when AllOutputs change,
        the FluentTabs might render incorrect selected tab
        even though ActiveTabId is set correctly (probably a bug). *@
        <FluentTabs @bind-ActiveTabId="selectedOutputType" @bind-ActiveTabId:after="UpdateOutputDisplayAsync" @key="AllOutputsKey">
            @foreach (var output in AllOutputs)
            {
                @* NOTE: Label is shown in the overflow menu, so it needs to be set even though Header is also set. *@
                <FluentTab Id="@output.Type" Label="@output.Label">
                    <Header>
                        <span>@output.Label</span>

                        @* Error List badge *@
                        @if (output.Type == CompiledAssembly.DiagnosticsOutputType &&
                            compiled?.Output is { } compiledOutput &&
                            compiledOutput is { NumErrors: > 0 } or { NumWarnings: > 0 })
                        {
                            var color = compiledOutput.NumErrors > 0 ? "error" : "warning";
                            <FluentBadge Fill="x" BackgroundColor="@($"var(--{color})")" Color="white" Style="margin-left: 0.4em">
                                @(compiledOutput.NumErrors > 0 ? compiledOutput.NumErrors : compiledOutput.NumWarnings)
                            </FluentBadge>
                        }
                    </Header>
                </FluentTab>
            }

            <div slot="end">
                @* Output loading indicator *@
                <FluentProgressRing title="Output is loading" Visible="outputLoading" Width="1em" Style="margin-right: 0.2em" />

                @* Design time / runtime toggle *@
                @if (CurrentCompiledFile?.GetOutput(selectedOutputType!)?.DesignTimeText is not null)
                {
                    <FluentSelect TOption="string" AriaLabel="Generation Strategy"
                    @bind-Value="generationStrategy" @bind-Value:after="UpdateOutputDisplayAsync"
                    Style="min-width: 7em; margin-right: 0.2em">
                        <FluentOption Value="runtime">Runtime</FluentOption>
                        <FluentOption Value="@designTime">Design</FluentOption>
                    </FluentSelect>
                }
            </div>
        </FluentTabs>

        @* Output editor *@
        <div style="flex-grow: 1">
            <BlazorMonaco.Editor.StandaloneCodeEditor @ref="outputEditor" Id="output-editor"
            ConstructionOptions="OutputConstructionOptions" />
        </div>
    </div>
    ;

    var panel1 = layout == Layout.OutputOnly ? outputPanel : inputPanel;
    var panel2 = layout == Layout.OutputOnly ? inputPanel : outputPanel;
}
<FluentSplitter Orientation="orientation" Panel1Size="50%" Panel2Size="50%"
Style="flex-grow: 1; overflow: hidden"
Panel1="panel1" Panel2="panel2" Collapsed="layout != Layout.Split" />

@code {
    private static readonly Dictionary<string, string> presets = new()
        {
            [nameof(InputPreset.CSharp)] = "C#",
            [nameof(InputPreset.Razor)] = "Razor",
            [nameof(InputPreset.Cshtml)] = "CSHTML",
        };

    private readonly TaskCompletionSource editorInitialized = new();
    private readonly List<Input> inputs = new();
    private DotNetObjectReference<Page>? dotNetObjectReference;
    private IJSObjectReference? module;
    private Input? configuration;
    private string activeInputTabId = IndexToInputTabId(0);
    private StandaloneCodeEditor inputEditor = null!;
    private StandaloneCodeEditor outputEditor = null!;
    private string? selectedOutputType;
    private string? generationStrategy;
    private bool compilationInProgress;
    private bool outputLoading;
    private (CompilationInput Input, CompiledAssembly Output)? compiled;
    private Settings settings = null!;
    private bool wordWrap;
    private bool useVim;
    private Orientation orientation;
    private Layout layout;
    private const string designTime = "designTime";

    private sealed record Input(string FileName, TextModel Model)
    {
        public string FileName { get; set; } = FileName;
        public string? NewContent { get; set; }
    }

    private enum InputPreset
    {
        CSharp,
        Razor,
        Cshtml,
    }

    private enum SpecialInput
    {
        Configuration = -1,
    }

    private enum Layout
    {
        Split,
        InputOnly,
        OutputOnly,
    }

    private Input? CurrentInput
    {
        get
        {
            var i = InputTabIdToIndex(activeInputTabId);

            if (i < 0 || i >= inputs.Count)
            {
                return null;
            }

            return inputs[i];
        }
    }

    private IEnumerable<CompiledFileOutput> AllOutputs
    {
        get => (CurrentCompiledFile?.Outputs)
            .TryConcat(compiled?.Output.GlobalOutputs);
    }

    private string AllOutputsKey
    {
        get => AllOutputs.Select(o => o.Type).JoinToString(",");
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;

        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException) { }
        }

        dotNetObjectReference?.Dispose();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadStateFromUrlAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Lab/Page.razor.js");
            dotNetObjectReference = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("registerEventListeners", dotNetObjectReference);
        }

        // Select an output type if none is selected.
        if (noOutputTypeSelected())
        {
            selectedOutputType = AllOutputs.MaxBy(static o => o.Priority)!.Type;
            if (noOutputTypeSelected())
            {
                // Do not call `StateHasChanged` - that would lead to stack overflow.
                Debug.Assert(false, "Unexpected cycle in selecting default output type.");
            }
            else
            {
                StateHasChanged();
                await UpdateOutputDisplayAsync();
            }
        }

        bool noOutputTypeSelected()
        {
            return AllOutputs.Any() &&
                (selectedOutputType == null || GetOutput(selectedOutputType) == null);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new()
        {
            AutomaticLayout = true,
            WordWrap = wordWrap ? "on" : "off",
            Padding = new() { Top = 10 },
        };
    }

    private StandaloneEditorConstructionOptions OutputConstructionOptions(StandaloneCodeEditor editor)
    {
        return new()
        {
            AutomaticLayout = true,
            ReadOnly = true,
            WordWrap = wordWrap ? "on" : "off",
            Value = "Empty output (click Compile or press Ctrl+S to refresh)",
            BracketPairColorization = new() { Enabled = false },
            Padding = new() { Top = 10 },
        };
    }

    private async Task OnInputPresetSelectedAsync(MenuChangeEventArgs args)
    {
        var initialCode = args.Id switch
        {
            nameof(InputPreset.CSharp) => InitialCode.CSharp,
            nameof(InputPreset.Razor) => InitialCode.Razor,
            nameof(InputPreset.Cshtml) => InitialCode.Cshtml,
            _ => null,
        };
        if (initialCode != null)
        {
            await SaveStateToUrlAsync();

            inputs.Clear();
            activeInputTabId = IndexToInputTabId(0);
            await AddInputAsync(initialCode);

            if (args.Id == nameof(InputPreset.Razor))
            {
                await AddInputAsync(InitialCode.RazorImports, selectAsCurrent: false);
            }

            await SaveStateToUrlAsync();
        }
    }

    private const string inputTabIdPrefix = "i";
    private const string outputTabIdPrefix = "o";

    private static int InputTabIdToIndex(string tabId)
    {
        return TabIdToIndex(inputTabIdPrefix, tabId);
    }

    private static int OutputTabIdToIndex(string tabId)
    {
        return TabIdToIndex(outputTabIdPrefix, tabId);
    }

    private static int TabIdToIndex(string prefix, string tabId)
    {
        return int.Parse(tabId.Substring(prefix.Length));
    }

    private static string IndexToInputTabId(int index)
    {
        return IndexToTabId(inputTabIdPrefix, index);
    }

    private static string IndexToOutputTabId(int index)
    {
        return IndexToTabId(outputTabIdPrefix, index);
    }

    private static string IndexToTabId(string prefix, int index)
    {
        return $"{prefix}{index}";
    }

    private async Task OnActiveInputTabIdChangedAsync()
    {
        var i = InputTabIdToIndex(activeInputTabId);

        if (i == (int)SpecialInput.Configuration)
        {
            await SelectConfigurationAsync();
        }
        else if (i >= 0 && i < inputs.Count)
        {
            await SelectInputTabAsync(inputs[i], i);
        }
        else
        {
            return;
        }
    }

    private async Task OnInputTabClosedAsync(FluentTab tab)
    {
        await SaveStateToUrlAsync();

        var i = InputTabIdToIndex(tab.Id!);
        var activeInputTabIndex = InputTabIdToIndex(activeInputTabId);

        if (i == (int)SpecialInput.Configuration)
        {
            configuration = null;
        }
        else if (inputs.Count > 1)
        {
            inputs.RemoveAt(i);
        }
        else
        {
            return;
        }

        OnWorkspaceChanged();

        await SaveStateToUrlAsync();
    }

    private async Task OnInputTabRenamedAsync(Input input, string newName)
    {
        await SaveStateToUrlAsync();

        if (input.FileName != newName)
        {
            var oldLanguage = GetLanguageForFileExtension(Path.GetExtension(input.FileName));
            var newLanguage = GetLanguageForFileExtension(Path.GetExtension(newName));

            input.FileName = newName;

            if (oldLanguage != newLanguage)
            {
                await BlazorMonaco.Editor.Global.SetModelLanguage(JSRuntime, input.Model, newLanguage);
            }

            OnWorkspaceChanged();
        }

        await SaveStateToUrlAsync();
    }

    private async Task OnAddInputTabAsync(MenuChangeEventArgs args)
    {
        await SaveStateToUrlAsync();

        if (args.Id == "config")
        {
            await SelectConfigurationAsync();
        }
        else if (args.Id switch
        {
            "cs" => InitialCode.CSharp,
            "razor" => InitialCode.Razor,
            "cshtml" => InitialCode.Cshtml,
            _ => null,
        } is { } initialCode)
        {
            await AddInputAsync(initialCode);
        }
        else
        {
            return;
        }

        await SaveStateToUrlAsync();
    }

    internal async Task SelectConfigurationAsync()
    {
        if (configuration is null)
        {
            await SaveStateToUrlAsync();

            configuration = new(
                InitialCode.Configuration.SuggestedFileName,
                await CreateModelAsync(InitialCode.Configuration.ToInputCode()));
            OnWorkspaceChanged();

            await SaveStateToUrlAsync();
        }

        await SelectInputTabAsync(configuration, (int)SpecialInput.Configuration);
    }

    private async Task SelectInputTabAsync(Input input, int index)
    {
        // Update the editor.
        await inputEditor.SetModel(input.Model);

        // Update the tabs.
        activeInputTabId = IndexToInputTabId(index);
        StateHasChanged();

        // Display output corresponding to the selected input.
        await UpdateOutputDisplayAsync();
    }

    private async Task AddInputAsync(InitialCode initialCode, bool selectAsCurrent = true)
    {
        var fileName = FindUniqueName(initialCode);
        var inputCode = initialCode.ToInputCode(fileName);
        var model = await CreateModelAsync(inputCode);
        var input = new Input(fileName, model) { NewContent = inputCode.Text };
        inputs.Add(input);
        OnWorkspaceChanged();
        if (selectAsCurrent)
        {
            await SelectInputTabAsync(input, inputs.Count - 1);
        }
    }

    private string FindUniqueName(InitialCode initialCode)
    {
        for (var i = 0; ; i++)
        {
            var suffix = i == 0 ? "" : $"{i}";
            var fileName = initialCode.GetFinalFileName(suffix);
            if (!inputs.Any(i => i.FileName == fileName))
            {
                return fileName;
            }
        }
    }

    [JSInvokable]
    public async Task CompileAndRenderAsync()
    {
        await CompileAsync();
        StateHasChanged();
    }

    private async Task CompileAsync()
    {
        compilationInProgress = true;

        await RefreshAsync();

        await editorInitialized.Task;

        var savedState = await SaveStateToUrlAsync();

        // Compile.
        var input = savedState.ToCompilationInput();
        var result = await Worker.CompileAsync(input);
        compiled = (input, result);

        await DisplaySquiggles();

        compilationInProgress = false;

        await UpdateOutputDisplayAsync();
    }

    private async Task DisplaySquiggles()
    {
        foreach (var input in inputs)
        {
            List<MarkerData> markers = compiled?.Output.Diagnostics
                .Where(d => d.FilePath == compiled.Value.Output.BaseDirectory + input.FileName)
                .Select(d => d.ToMarkerData())
                .ToList() ?? [];
            await BlazorMonaco.Editor.Global.SetModelMarkers(JSRuntime, input.Model, "Lab", markers);
        }
    }

    private async Task UpdateOutputDisplayAsync()
    {
        if (compiled is null || selectedOutputType is null)
        {
            await outputEditor.SetModel(await BlazorMonaco.Editor.Global.CreateModel(JSRuntime, value: ""));
            return;
        }

        var output = GetOutput(selectedOutputType);
        var outputText = await LoadOutputText(output);
        await outputEditor.SetModel(await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: outputText,
            language: output?.Output.Language));
    }

    private (CompiledFileOutput Output, string? File)? GetOutput(string type)
    {
        if (CurrentCompiledFile is { } currentCompiledFile)
        {
            if (currentCompiledFile.GetOutput(type) is { } output)
            {
                return (output, CurrentFileName);
            }
        }

        if (compiled?.Output.GetGlobalOutput(type) is { } globalOutput)
        {
            return (globalOutput, null);
        }

        return null;
    }

    private async Task<string> LoadOutputText((CompiledFileOutput Output, string? File)? outputInfo)
    {
        if (outputInfo is not (var output, var file))
        {
            return "";
        }

        if (output.DesignTimeText is not null && generationStrategy == designTime)
        {
            return output.DesignTimeText;
        }

        if (output.EagerText is { } text)
        {
            return text;
        }

        if (!outputLoading)
        {
            return await loadAsync(compiled!.Value.Input, file: file, outputType: output.Type);
        }

        return "";

        async Task<string> loadAsync(CompilationInput input, string? file, string outputType)
        {
            outputLoading = true;
            await RefreshAsync();

            string? result;
            try
            {
                // The text will be cached and loaded synchronously next time.
                result = await output.GetTextAsync(outputFactory: async () =>
                {
                    return await Worker.GetOutputAsync(input, file: file, outputType: outputType);
                });
            }
            catch (Exception ex)
            {
                result = ex.ToString();
            }

            outputLoading = false;
            StateHasChanged();
            return result;
        }
    }

    private string CurrentFileName => CurrentInput?.FileName ?? "";

    private CompiledFile? CurrentCompiledFile
    {
        get
        {
            return compiled?.Output.Files.TryGetValue(CurrentFileName, out var file) == true
                ? file
                : null;
        }
    }

    private async Task EditorInitAsync()
    {
        await settings.InitializeAsync();

        await LoadStateFromUrlAsync();

        if (!editorInitialized.TrySetResult())
        {
            // This can happen during hot reload, hence we don't assert.
            Logger.LogError("Failed to set editor initialized result.");
        }
    }

    private async Task<TextModel> CreateModelAsync(InputCode inputCode)
    {
        return await BlazorMonaco.Editor.Global.CreateModel(
            JSRuntime,
            value: inputCode.Text,
            language: GetLanguageForFileExtension(inputCode.FileExtension));
    }

    private static string? GetLanguageForFileExtension(string extension) => extension switch
    {
        ".razor" or ".cshtml" => "razor",
        ".cs" => "csharp",
        _ => null,
    };

    /// <summary>
    /// Should be called before SetModel of Monaco editor whenever (after) <see cref="inputs"/> change.
    /// </summary>
    private void OnWorkspaceChanged()
    {
        var models = inputs
            .Select(i => new ModelInfo(Uri: i.Model.Uri, FileName: i.FileName) { NewContent = i.NewContent })
            .ToImmutableArray();
        inputs.ForEach(i => { i.NewContent = null; });
        Worker.OnDidChangeWorkspace(models);
    }
}
