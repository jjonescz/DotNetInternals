@implements IDisposable
@inject ILogger<Settings> Logger
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject WorkerController Worker
@inject LanguageServices LanguageServices

<button type="button" class="btn btn-outline-secondary" @onclick="OpenModalAsync">
    Settings

    @if (!hideUpdateAvailableBadge && UpdateInfo.UpdateIsAvailable)
    {
        <span class="badge bg-info ms-1" title="Update is available">1</span>
    }
</button>

@if (modalOpen)
{
    <div class="modal d-block bg-opacity-75 bg-secondary" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Settings</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="() => modalOpen = false"></button>
                </div>
                <div class="modal-body">
                    @* Word wrap check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="wordWrap" @bind="WordWrap"
                            @bind:after="OnWordWrapChanged" />
                        <label class="form-check-label" for="wordWrap">
                            Word wrap
                        </label>
                    </div>

                    @* Use VIM check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="vim" @bind="UseVim"
                            @bind:after="OnVimChanged" />
                        <label class="form-check-label" for="vim">
                            Use VIM
                        </label>
                    </div>

                    @* Debug logs check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="debugLogs"
                            @bind="DebugLogs" @bind:after="OnSetDebugLogsAsync" />
                        <label class="form-check-label" for="debugLogs"
                               title="Whether to display debug-level logs in the browser development console">
                            Debug logs
                        </label>
                    </div>

                    @* Use a worker check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="enableWorker"
                            @bind="EnableWorker" @bind:after="OnSetEnableWorkerAsync" />
                        <label class="form-check-label" for="enableWorker"
                               title="Moves compilation to a separate worker thread">
                            Use a worker (requires restart)
                        </label>
                    </div>

                    @* Language services check box *@
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="enableLanguageServices"
                               @bind="EnableLanguageServices" @bind:after="OnSetEnableLanguageServicesAsync" />
                        <label class="form-check-label" for="enableLanguageServices"
                               title="Completions, live diagnostics">
                            <span class="badge bg-secondary text-capitalize">experimental</span>
                            Language services (requires restart)
                        </label>
                    </div>

                    <h6 class="mt-3 h5">Compilers</h6>

                    @* SDK version select *@
                    <div class="mb-3">
                        <div class="input-group">
                            <label for="sdkVersion" class="input-group-text">
                                SDK
                            </label>
                            <input type="text" class="form-control" id="sdkVersion"
                                   @bind="sdkVersion" @bind:after="() => LoadSdkInfoAsync()"
                                   placeholder="version" />
                            @if (loadingSdkInfo)
                            {
                                <span class="input-group-text">
                                    <span class="spinner-border spinner-border-sm" role="status" title="Loading info..."></span>
                                </span>
                            }
                        </div>
                        <div class="form-text">
                            Enter a .NET SDK version above to automatically get
                            the corresponding Roslyn and Razor version numbers below.
                        </div>
                        @if (sdkInfo != null)
                        {
                            <div class="form-text">
                                SDK @(sdkInfo.SdkVersion)
                                (<a href="@sdkInfo.Commit.Url"
                                    target="_blank">@sdkInfo.Commit.ShortHash</a>)
                                has roslyn @(sdkInfo.RoslynVersion)
                                and razor @(sdkInfo.RazorVersion).
                            </div>
                        }
                        @if (sdkError != null)
                        {
                            <div class="form-text text-danger">
                                @sdkError
                            </div>
                        }
                    </div>

                    @* Roslyn version select *@
                    <div class="mb-3">
                        <div class="input-group">
                            <label for="roslynVersion" class="input-group-text">
                                Roslyn
                            </label>
                            <input type="text" class="form-control" id="roslynVersion"
                                   @bind="roslynVersion" @bind:after="() => LoadRoslynInfoAsync()"
                                   placeholder="version" />
                            @if (loadingRoslynInfo)
                            {
                                <span class="input-group-text">
                                    <span class="spinner-border spinner-border-sm" role="status" title="Loading info..."></span>
                                </span>
                            }
                        </div>
                        <div class="form-text">
                            See
                            <a href="@NuGetUtil.GetPackageVersionListUrl(CompilerDependencyConstants.RoslynPackageId)"
                               target="_blank">available Roslyn versions</a>.
                            Use
                            @if (roslynVersion != "latest")
                            {
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRoslynVersionAsync("latest"))">latest</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(roslynVersion))
                            {
                                if (roslynVersion != "latest")
                                {
                                    @(" or ")
                                }
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRoslynVersionAsync(null))">built-in</a>
                            }
                            @(".")
                        </div>
                        @if (roslynInfo != null)
                        {
                            <div class="form-text">
                                Using @(roslynInfo.Version)
                                (<a href="@roslynInfo.Commit.Url"
                                    target="_blank">@roslynInfo.Commit.ShortHash</a>).
                            </div>
                        }
                        @if (roslynError != null)
                        {
                            <div class="form-text text-danger">
                                @roslynError
                            </div>
                        }
                    </div>

                    @* Razor version select *@
                    <div class="mb-3">
                        <div class="input-group">
                            <label for="razorVersion" class="input-group-text">
                                Razor
                            </label>
                            <input type="text" class="form-control" id="razorVersion"
                                   @bind="razorVersion" @bind:after="() => LoadRazorInfoAsync()"
                                   placeholder="version" />
                            @if (loadingRazorInfo)
                            {
                                <span class="input-group-text">
                                    <span class="spinner-border spinner-border-sm" role="status" title="Loading info..."></span>
                                </span>
                            }
                        </div>
                        <div class="form-text">
                            See
                            <a href="@NuGetUtil.GetPackageVersionListUrl(CompilerDependencyConstants.RazorPackageId)"
                               target="_blank">available Razor versions</a>.
                            Use
                            @if (razorVersion != "latest")
                            {
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRazorVersionAsync("latest"))">latest</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(razorVersion))
                            {
                                if (razorVersion != "latest")
                                {
                                    @(" or ")
                                }
                                <a href="javascript:void" @onclick:preventDefault
                                    @onclick="@(() => UseRazorVersionAsync(null))">built-in</a>
                            }
                            @(".")
                        </div>
                        @if (razorInfo != null)
                        {
                            <div class="form-text">
                                Using @(razorInfo.Version)
                                (<a href="@razorInfo.Commit.Url"
                                    target="_blank">@razorInfo.Commit.ShortHash</a>).
                            </div>
                        }
                        @if (razorError != null)
                        {
                            <div class="form-text text-danger">
                                @razorError
                            </div>
                        }
                    </div>

                    @* About section *@
                    <h6 class="mt-3 h5">About</h6>
                    <p>
                        <a href="@VersionUtil.CurrentRepositoryUrl" target="_blank">GitHub</a>,
                        commit <a href="@VersionUtil.CurrentCommitUrl" target="_blank">@VersionUtil.CurrentShortCommitHash</a>
                    </p>

                    @if (UpdateInfo.UpdateIsAvailable)
                    {
                        <div class="alert alert-info" role="alert">
                            <strong>An update is available.</strong>
                            Close all app tabs and reopen to activate the update.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="() => modalOpen = false">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool modalOpen, hideUpdateAvailableBadge;
    private IJSObjectReference? vimDisposable;
    private string? sdkVersion, roslynVersion, razorVersion;
    private bool loadingSdkInfo, loadingRoslynInfo, loadingRazorInfo;
    private SdkInfo? sdkInfo;
    private NuGetPackageInfo? roslynInfo, razorInfo;
    private string? sdkError, roslynError, razorError;

    [Parameter] public bool WordWrap { get; set; }
    [Parameter] public EventCallback<bool> WordWrapChanged { get; set; }
    [Parameter] public bool UseVim { get; set; }
    [Parameter] public EventCallback<bool> UseVimChanged { get; set; }
    [Parameter, EditorRequired] public required StandaloneCodeEditor Editor { get; set; }
    [CascadingParameter] public required Page Page { get; set; }

    private bool DebugLogs
    {
        get => Logging.LogLevel == LogLevel.Debug;
        set => Logging.LogLevel = value ? LogLevel.Debug : LogLevel.Information;
    }

    private bool EnableLanguageServices { get; set; }
    private bool EnableWorker { get; set; }

    private async Task OnSetDebugLogsAsync()
    {
        await LocalStorage.SetItemAsync(nameof(DebugLogs), DebugLogs);
    }

    private async Task OnSetEnableLanguageServicesAsync()
    {
        await LocalStorage.SetItemAsync(nameof(EnableLanguageServices), EnableLanguageServices);
    }

    private async Task OnSetEnableWorkerAsync()
    {
        await LocalStorage.SetItemAsync(nameof(EnableWorker), EnableWorker);
    }

    public async Task InitializeAsync()
    {
        UpdateInfo.UpdateBecameAvailable += StateHasChanged;

        // Load settings from local storage.
        if (await LocalStorage.ContainKeyAsync(nameof(WordWrap)))
        {
            WordWrap = await LocalStorage.GetItemAsync<bool>(nameof(WordWrap));
            await OnWordWrapChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(UseVim)))
        {
            UseVim = await LocalStorage.GetItemAsync<bool>(nameof(UseVim));
            await OnVimChanged();
        }
        if (await LocalStorage.ContainKeyAsync(nameof(DebugLogs)))
        {
            DebugLogs = await LocalStorage.GetItemAsync<bool>(nameof(DebugLogs));
        }
        if (await LocalStorage.ContainKeyAsync(nameof(EnableLanguageServices)))
        {
            EnableLanguageServices = await LocalStorage.GetItemAsync<bool>(nameof(EnableLanguageServices));
        }
        EnableWorker = await LocalStorage.ContainKeyAsync(nameof(EnableWorker))
            ? await LocalStorage.GetItemAsync<bool>(nameof(EnableWorker))
            : true;

        if (EnableLanguageServices)
        {
            await LanguageServices.RegisterAsync();
        }
        else
        {
            LanguageServices.Disabled = true;
        }

        Worker.Disabled = !EnableWorker;
    }

    void IDisposable.Dispose()
    {
        UpdateInfo.UpdateBecameAvailable -= StateHasChanged;
    }

    private Task OpenModalAsync()
    {
        hideUpdateAvailableBadge = true;

        if (modalOpen)
        {
            return Task.CompletedTask;
        }

        modalOpen = true;

        Task sdkTask = Task.CompletedTask;
        Task roslynTask = Task.CompletedTask;
        Task razorTask = Task.CompletedTask;

        if (sdkInfo is null)
        {
            sdkTask = LoadSdkInfoAsync(saveState: false);
        }

        if (roslynInfo is null)
        {
            roslynTask = LoadRoslynInfoAsync(saveState: false);
        }

        if (razorInfo is null)
        {
            razorTask = LoadRazorInfoAsync(saveState: false);
        }

        return Task.WhenAll(sdkTask, roslynTask, razorTask);
    }

    internal Task LoadFromStateAsync(SavedState state)
    {
        Task sdkTask = Task.CompletedTask;
        Task roslynTask = Task.CompletedTask;
        Task razorTask = Task.CompletedTask;

        if (sdkVersion != state.SdkVersion)
        {
            sdkVersion = state.SdkVersion;
            sdkTask = LoadSdkInfoAsync(saveState: false);
        }

        if (roslynVersion != state.RoslynVersion)
        {
            roslynVersion = state.RoslynVersion;
            roslynTask = LoadRoslynInfoAsync(saveState: false);
        }

        if (razorVersion != state.RazorVersion)
        {
            razorVersion = state.RazorVersion;
            razorTask = LoadRazorInfoAsync(saveState: false);
        }

        return Task.WhenAll(sdkTask, roslynTask, razorTask);
    }

    private async Task LoadSdkInfoAsync(bool saveState = true)
    {
        var versionToLoad = sdkVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with { SdkVersion = versionToLoad });
        }

        loadingSdkInfo = true;
        await RefreshAsync();

        SdkInfo? info;
        string? error;
        try
        {
            if (string.IsNullOrEmpty(versionToLoad))
            {
                info = null;
                error = null;
            }
            else
            {
                info = !modalOpen ? null : await Worker.GetSdkInfoAsync(versionToLoad);
                error = null;

                if (saveState)
                {
                    await Task.WhenAll(
                        UseRoslynVersionAsync(info?.RoslynVersion),
                        UseRazorVersionAsync(info?.RazorVersion));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load SDK info.");
            error = ex.Message;
            info = null;
        }

        if (sdkVersion == versionToLoad)
        {
            sdkInfo = info;
            sdkError = error;
        }

        loadingSdkInfo = false;
    }

    private async Task UseSdkVersionAsync(string? version)
    {
        sdkVersion = version;
        await LoadSdkInfoAsync();
    }

    private async Task LoadRoslynInfoAsync(bool saveState = true)
    {
        var versionToLoad = roslynVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with { RoslynVersion = versionToLoad });
        }

        loadingRoslynInfo = true;
        await RefreshAsync();

        NuGetPackageInfo? info;
        string? error;
        try
        {
            const string key = "roslyn";

            Worker.UseCompilerVersion(
                CompilerKind.Roslyn,
                version: versionToLoad);

            info = !modalOpen
                ? null
                : await Worker.GetPackageInfoAsync(key)
                ?? NuGetPackageInfo.GetBuiltInInfo(CompilerDependencyConstants.RoslynAssemblyName);

            error = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load roslyn info.");
            error = ex.Message;
            info = null;
        }

        if (roslynVersion == versionToLoad)
        {
            roslynInfo = info;
            roslynError = error;
        }

        loadingRoslynInfo = false;
    }

    private async Task UseRoslynVersionAsync(string? version)
    {
        roslynVersion = version;
        await LoadRoslynInfoAsync();
    }

    private async Task LoadRazorInfoAsync(bool saveState = true)
    {
        var versionToLoad = razorVersion;

        if (saveState)
        {
            await Page.SaveStateToUrlAsync(state => state with { RazorVersion = versionToLoad });
        }

        loadingRazorInfo = true;
        await RefreshAsync();

        NuGetPackageInfo? info;
        string? error;
        try
        {
            const string key = "razor";

            Worker.UseCompilerVersion(
                CompilerKind.Razor,
                version: versionToLoad);

            info = !modalOpen
                ? null
                : await Worker.GetPackageInfoAsync(key)
                ?? NuGetPackageInfo.GetBuiltInInfo(CompilerDependencyConstants.RazorAssemblyName);

            error = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load razor info.");
            error = ex.Message;
            info = null;
        }

        if (razorVersion == versionToLoad)
        {
            razorInfo = info;
            razorError = error;
        }

        loadingRazorInfo = false;
    }

    private async Task UseRazorVersionAsync(string? version)
    {
        razorVersion = version;
        await LoadRazorInfoAsync();
    }

    private async Task OnWordWrapChanged()
    {
        await RefreshAsync();
        await WordWrapChanged.InvokeAsync(WordWrap);
        await LocalStorage.SetItemAsync(nameof(WordWrap), WordWrap);
        await Editor.UpdateOptions(new EditorUpdateOptions { WordWrap = WordWrap ? "on" : "off" });
    }

    private async Task OnVimChanged()
    {
        await RefreshAsync();
        await UseVimChanged.InvokeAsync(UseVim);
        await LocalStorage.SetItemAsync(nameof(UseVim), UseVim);
        if (UseVim)
        {
            if (vimDisposable is null)
            {
                vimDisposable = await JSRuntime.InvokeAsync<IJSObjectReference>("jslib.EnableVimMode", "input-editor", "vim-status");
            }
        }
        else
        {
            if (vimDisposable is not null)
            {
                await vimDisposable.InvokeVoidAsync("dispose");
                vimDisposable = null;
            }
        }

        await Editor.Layout();
    }
}
